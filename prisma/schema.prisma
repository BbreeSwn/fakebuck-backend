generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String?  @unique
  mobile       String?  @unique
  password     String
  profileImage String?
  coverImage   String?
  createdAt    DateTime @default(now()) @db.Timestamp(0)
  updatedAt    DateTime @updatedAt @db.Timestamp(0)

  posts    Post[]
  comments Comment[]
  likes    Like[]

  senders  Relationship[] @relation("Sender")
  receivers Relationship[] @relation("Receiver")
}

model Post {
  id        Int      @id @default(autoincrement())
  message   String?  @db.LongText
  image     String?
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  deletedAt DateTime @db.Timestamp(0)

  userId Int
  user   User @relation(fields: [userId], references: [id])

  comments Comment[]
  likes    Like[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  message   String
  createdAt DateTime @default(now()) @db.Timestamp(0)
  updatedAt DateTime @updatedAt @db.Timestamp(0)
  deletedAt DateTime @db.Timestamp(0)

  postId Int
  posts  Post @relation(fields: [postId], references: [id])

  userId Int
  user   User @relation(fields: [userId], references: [id])
}

model Like {
  createdAt DateTime @default(now()) @db.Timestamp(0)
  userId    Int
  postId    Int

  user  User @relation(fields: [userId], references: [id])
  posts Post @relation(fields: [postId], references: [id])

  //composit key คือการนำเอา คอลลัม user กับ post มาประกอบกันเป็น PK
  @@id([userId, postId])
}

enum RelationshipStatus {
  PENDING
  ACCEPTED
}

model Relationship {
  id         Int                @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     RelationshipStatus @default(PENDING)
  createdAt  DateTime           @default(now()) @db.Timestamp(0)
  updatedAt  DateTime           @updatedAt @db.Timestamp(0)

  sender   User @relation("Sender", fields: [senderId], references: [id])
  receiver User @relation("Receiver", fields: [receiverId], references: [id])
}
